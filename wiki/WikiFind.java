/*
License Information, 2023 Livio (javalc6)

Feel free to modify, re-use this software, please give appropriate
credit by referencing this Github repository.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

IMPORTANT NOTICE
Note that this software is freeware and it is not designed, licensed or
intended for use in mission critical, life support and military purposes.
The use of this software is at the risk of the user. 

DO NOT USE THIS SOFTWARE IF YOU DON'T AGREE WITH STATED CONDITIONS.
*/
package wiki;
import java.util.*;
import java.io.*;

import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import wiki.tools.WikiFormatter;
import wiki.tools.WikiPage;
import wiki.TemplateParser;
import static wiki.tools.Utilities.getLocale;

/*
Wiktionary finder: this demo tool finds a word and writes an html file (wiki.html) with the word definition, if found.
This is just a demo, you can use this code as base for other applications.

This application requires the following files generated by WikiSplitter:

- wiki.dat: line oriented text file with definitions
- templates.dat: line oriented text file with templates
- modules.dat: line oriented text file with modules


compile: javac -cp .;lib\luaj-jse-3.0.2p.jar wiki\WikiFind.java

usage:  java -cp .;lib\luaj-jse-3.0.2p.jar wiki.WikiFind <word>

*/
public class WikiFind {
	final static String linkBaseURL = "https://%s.wiktionary.org/wiki/";

	private static void doSearch(String keyword) throws IOException, ParseException {
		HashMap<String, String> name2template = new HashMap<>();
		HashMap<String, String> name2module = new HashMap<>();
		HashMap<String, String> name2content = new HashMap<>();
		System.out.println("Reading input files, please wait...");
		readfile(name2template, "templates.dat", false);
		readfile(name2module, "modules.dat", false);
		String firstline = readfile(name2content, "wiki.dat", true);
		int idx = firstline.indexOf("|");
		String language = firstline.substring(0, idx);
		String definition = name2content.get(keyword);
		if (definition != null) {
			System.out.println(keyword + " found, rendering and writing wiki.html");
			TemplateParser tp = new TemplateParser();
			WikiPage wp = new WikiPage(keyword,  new SimpleDateFormat("dd-MM-yyyy hh:mm").parse("01-01-2020 15:30"),
					getLocale(language), tp, name2template, name2module, false, name2content, true);
			String formatted = WikiFormatter.formatWikiText(new StringBuilder(keyword), new StringBuilder(tp.parse(definition, wp)), linkBaseURL, language);
			PrintWriter output = new PrintWriter("wiki.html", "UTF-8");
			output.println(formatted);
			output.close();
		} else System.out.println("Unable to find " + keyword);
	}

	public static String readfile(HashMap<String, String> name2page, String fn, boolean isWikiDat) {
		String firstline = null;
		try (LineNumberReader in = new LineNumberReader(new InputStreamReader(new FileInputStream(fn), StandardCharsets.UTF_8))) {
			StringBuilder definition = new StringBuilder();
			String st, identifier = "";
			String [] result;
			if (isWikiDat)
				firstline = in.readLine(); // read first line in wiki.dat
			int skiplines = 0;
			while((st = in.readLine()) != null) {
				if (skiplines > 0) {
					definition.append(st);
					skiplines--;
					if (skiplines == 0)	{
						assert identifier.length() > 0;
						name2page.put(identifier, definition.toString());
						definition.setLength(0);
					} else definition.append("\n");
					continue;
				}
				if ((!st.contains("|"))) {
					System.out.println("Error1 Parsing in "+fn+": "+st);
					System.exit(1);
				}
				result = st.split("\\|");
				identifier =result[0].trim();
				try {
					skiplines = Integer.parseInt(result[1]);
				} catch (Exception ex) {
					System.out.println("Error2 Parsing in "+fn+": "+st);
					System.exit(1);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return firstline;//firstline is returned only in case of isWikiDat, otherwise null is returned
	}

	public static void main(String[] args) {
		if (args.length == 1) {
			String word = args[0];
			try {
				doSearch(word);
			} catch(ParseException | IOException e) {
				e.printStackTrace();
			}

		} else {
			System.out.println("Usage: java WikiFind <word>");
		}
	}
}